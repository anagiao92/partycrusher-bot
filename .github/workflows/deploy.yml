name: Deploy PartyCrusher Bot

on:
  push:
    branches:
      - dev
      - qa
      - main

jobs:
  deploy:
    runs-on: self-hosted
    environment: ${{ github.ref_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set ENV_NAME & TAG based on branch
      - name: Set environment variables
        shell: powershell
        run: |
          if ($env:GITHUB_REF -eq "refs/heads/dev") {
            echo "ENV_NAME=dev" >> $env:GITHUB_ENV
            echo "TAG=dev" >> $env:GITHUB_ENV
          }
          elseif ($env:GITHUB_REF -eq "refs/heads/qa") {
            echo "ENV_NAME=qa" >> $env:GITHUB_ENV
            echo "TAG=qa" >> $env:GITHUB_ENV
          }
          elseif ($env:GITHUB_REF -eq "refs/heads/main") {
            echo "ENV_NAME=prod" >> $env:GITHUB_ENV
            echo "TAG=prod" >> $env:GITHUB_ENV
          }

      # Generate the environment file dynamically
      - name: Generate environment file
        shell: powershell
        run: |
          Set-Content -Path ".env.$env:ENV_NAME" -Value "${{ secrets.ENV_FILE }}"

      # Authenticate with GHCR
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build & Push Docker Image
      - name: Build & Push Docker Image
        run: |
          docker build -t ghcr.io/${{ github.repository }}:${{ env.TAG }} .
          docker push ghcr.io/${{ github.repository }}:${{ env.TAG }}

      # Deploy container
      - name: Deploy container
        shell: pwsh
        run: |
          try {
            docker compose --profile $env:ENV_NAME down --remove-orphans
          } catch {
            Write-Host "No existing container found, continuing..."
          }

          docker compose --profile $env:ENV_NAME up -d --pull always --build
