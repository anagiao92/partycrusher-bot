name: CI/CD

permissions:
  contents: read
  packages: write

on:
  push:
    branches: [ dev, qa, main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set tag by branch
        id: vars
        run: |
          if [[ "${GITHUB_REF##*/}" == "dev" ]]; then
            echo "TAG=dev" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF##*/}" == "qa" ]]; then
            echo "TAG=qa" >> $GITHUB_OUTPUT
          else
            echo "TAG=latest" >> $GITHUB_OUTPUT
          fi

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        run: |
          docker build -t $IMAGE_NAME:${{ steps.vars.outputs.TAG }} .

      - name: Push
        run: |
          docker push $IMAGE_NAME:${{ steps.vars.outputs.TAG }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/qa' || github.ref == 'refs/heads/main' }}
    steps:
      - name: Pick env/profile
        id: envpick
        run: |
          if [[ "${GITHUB_REF##*/}" == "dev" ]]; then
            echo "PROFILE=dev" >> $GITHUB_OUTPUT
            echo "TAG=dev" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF##*/}" == "qa" ]]; then
            echo "PROFILE=qa" >> $GITHUB_OUTPUT
            echo "TAG=qa" >> $GITHUB_OUTPUT
          else
            echo "PROFILE=prod" >> $GITHUB_OUTPUT
            echo "TAG=latest" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to Windows (SSH)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.WIN_HOST }}
          username: ${{ secrets.WIN_USER }}
          key: ${{ secrets.WIN_SSH_KEY }}
          port: 22
          script_stop: true
          script: |
            set -e
            cd C:/apps/partycrusher-bot

            docker logout ${{ env.REGISTRY }} || true
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

            docker pull ${{ env.IMAGE_NAME }}:${{ steps.envpick.outputs.TAG }}

            docker compose -f compose.yml --profile ${{ steps.envpick.outputs.PROFILE }} up -d

            docker image prune -f
